{"version":3,"sources":["../../index.js","App.js","serviceWorker.js","index.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","shiftKey","timeInputs","leading_zero","number","isNaN","purified","parseInt","window","addEventListener","e","$a11y","polyfillLoadCalled","input","onPolyfillLoad","timePolyfillHelpers","accessibility_block_created","customStyles","document","createElement","innerHTML","concat","getElementsByTagName","appendChild","_React$Component","TimeInput","props","_this","this","call","$input","createRef","focused_via_click","state","time","hrs","min","mode","value24hr","value","currentSegment","usePolyfill","forcePolyfill","loadedPolyfill","polyfill","setState","get_values_from_24hr","create_a11y_block","manual_entry_log","current","label","get_label","announcementArray","update_a11y","prevProps","prevState","hasNewPropsValue","hasNewStateValue","onTimeChange","set_time","time24hr","_time24hr$split$map","split","map","_time24hr$split$map2","newTimeValues","convert_hours_to_12hr_time","direction","_this2","segment","current_values","modifier","current_time","Date","getHours","getMinutes","minutes","up","down","set_segment","timeObj","join","value12hr","get_12hr_value","convert_to_24hr_time","_this3","segments","newIndex","indexOf","clear_entry_log","setTimeout","clear","traverse_segments","_this4","onChange","element","onMouseDown","matches","onClick","select_cursor_segment","get_current_segment","onFocus","onBlur","preventDefault","prev_segment","next_segment","_this5","actions","ArrowRight","ArrowLeft","ArrowUp","nudge_current_segment","ArrowDown","Delete","clear_current_segment","Backspace","numberKey","enter_number","A_or_P","enter_A_or_P","isNumberKey","test","is_A_or_P","handleTab","isA","entry_log","entry_count","items","upper_limits","limit","add","full_limit","full_entry","_this6","_this$props","className","_this$state","select_segment","polyfillClass","handleChange","handleFocus","handleBlur","handleMouseDown","handleClick","onKeyDown","handleKeyDown","ref","type","trim","undefined","Component","ExampleBlock","Input","codeString","useState","setValue","style","marginBottom","display","marginRight","currentValue","dark","language","showLineNumbers","replace","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67d489c5.chunk.js","sourcesContent":["import _objectWithoutProperties from \"C:\\\\Users\\\\danie\\\\Projects\\\\react-time-input-polyfill\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"C:\\\\Users\\\\danie\\\\Projects\\\\react-time-input-polyfill\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\danie\\\\Projects\\\\react-time-input-polyfill\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\danie\\\\Projects\\\\react-time-input-polyfill\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\danie\\\\Projects\\\\react-time-input-polyfill\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\danie\\\\Projects\\\\react-time-input-polyfill\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\danie\\\\Projects\\\\react-time-input-polyfill\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\danie\\\\Projects\\\\react-time-input-polyfill\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\danie\\\\Projects\\\\react-time-input-polyfill\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport supportsTime from 'time-input-polyfill/core/helpers/supportsTime';\nimport loadJS from 'time-input-polyfill/core/helpers/loadJS';\nvar debugMode = true; // const debugMode = false\n\nvar shiftKey = false;\nvar timeInputs = [];\n\nvar leading_zero = function leading_zero(number) {\n  if (isNaN(number)) return number;\n  var purified = parseInt(number);\n  return purified < 10 ? '0' + purified : number;\n};\n\nwindow.addEventListener('keyup', function (e) {\n  return shiftKey = e.shiftKey;\n});\nwindow.addEventListener('keydown', function (e) {\n  return shiftKey = e.shiftKey;\n});\nvar polyfillLoadCalled = false;\n\nvar loadPolyfill = function loadPolyfill() {\n  if (polyfillLoadCalled) return null;\n  polyfillLoadCalled = true;\n  loadJS(debugMode ? './timePolyfillHelpers.js' : 'https://cdn.jsdelivr.net/npm/react-time-input-polyfill/dist/timePolyfillHelpers.js', function () {\n    timeInputs.forEach(function (input) {\n      return input.onPolyfillLoad(window.timePolyfillHelpers);\n    });\n  });\n};\n\nvar accessibility_block_created = false;\nvar $a11y;\nvar polyfillClassName = 'react-time-input-polyfill-target';\nvar customStyles = document.createElement('style');\ncustomStyles.innerHTML = \".\".concat(polyfillClassName, \"::-ms-clear { display: none; }\");\ndocument.getElementsByTagName('head')[0].appendChild(customStyles);\n\nvar TimeInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TimeInput, _React$Component);\n\n  function TimeInput(props) {\n    var _this;\n\n    _classCallCheck(this, TimeInput);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TimeInput).call(this, props));\n    _this.$input = React.createRef();\n    _this.focused_via_click = false;\n    _this.state = {\n      time: {\n        hrs: '--',\n        min: '--',\n        mode: '--'\n      },\n      value24hr: props.value || '',\n      currentSegment: null,\n      usePolyfill: !supportsTime\n    };\n\n    if (props.forcePolyfill || !supportsTime) {\n      timeInputs.push(_assertThisInitialized(_this));\n      loadPolyfill();\n    }\n\n    return _this;\n  }\n\n  _createClass(TimeInput, [{\n    key: \"onPolyfillLoad\",\n    value: function onPolyfillLoad(loadedPolyfill) {\n      this.polyfill = loadedPolyfill;\n      this.setState({\n        usePolyfill: true,\n        time: this.polyfill.get_values_from_24hr(this.state.value24hr)\n      });\n\n      if (!accessibility_block_created) {\n        $a11y = this.polyfill.create_a11y_block();\n        accessibility_block_created = true;\n      }\n\n      this.manual_entry_log = {\n        hrs: new this.polyfill.manual_entry_log(),\n        min: new this.polyfill.manual_entry_log()\n      };\n      var $input = this.$input.current;\n      $input.polyfill = {\n        label: this.polyfill.get_label($input),\n        $a11y: $a11y\n      };\n    }\n  }, {\n    key: \"update_a11y\",\n    value: function update_a11y(announcementArray) {\n      if (!this.state.usePolyfill) return null;\n      this.polyfill.update_a11y(this.$input.current, announcementArray);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var hasNewPropsValue = prevProps.value !== this.props.value;\n      var hasNewStateValue = prevState.value24hr !== this.state.value24hr;\n      if (!hasNewPropsValue && !hasNewStateValue) return null;\n\n      if (hasNewStateValue) {\n        this.onTimeChange();\n      } else if (hasNewPropsValue && !this.state.usePolyfill) {\n        this.set_time(this.props.value);\n      }\n    }\n  }, {\n    key: \"set_time\",\n    value: function set_time(time24hr) {\n      var _time24hr$split$map = time24hr.split(':').map(function (value) {\n        return isNaN(value) ? value : parseInt(value);\n      }),\n          _time24hr$split$map2 = _slicedToArray(_time24hr$split$map, 2),\n          hrs = _time24hr$split$map2[0],\n          min = _time24hr$split$map2[1];\n\n      var newTimeValues = this.state.usePolyfill ? {\n        hrs: this.polyfill.convert_hours_to_12hr_time(hrs),\n        min: min,\n        mode: hrs > 12 ? 'PM' : 'AM'\n      } : null;\n      this.setState({\n        time: this.state.usePolyfill ? time24hr ? newTimeValues : this.state.time : null,\n        value24hr: time24hr\n      });\n    }\n  }, {\n    key: \"nudge_current_segment\",\n    value: function nudge_current_segment(direction) {\n      var _this2 = this;\n\n      var segment = this.state.currentSegment;\n      var current_values = this.state.time;\n      var time = {};\n      var modifier = direction === 'up' ? 1 : -1;\n\n      if (current_values[segment] === '--') {\n        var current_time = function current_time() {\n          return new Date();\n        };\n\n        time = {\n          hrs: function hrs() {\n            return _this2.polyfill.convert_hours_to_12hr_time(current_time().getHours());\n          },\n          min: function min() {\n            return current_time().getMinutes();\n          },\n          mode: function mode() {\n            return current_time().getHours() > 11 ? 'PM' : 'AM';\n          }\n        };\n      } else {\n        var minutes = {\n          up: current_values.min < 59 ? current_values.min + modifier : 0,\n          down: current_values.min === 0 ? 59 : current_values.min + modifier\n        };\n        time = {\n          hrs: function hrs() {\n            return _this2.polyfill.convert_hours_to_12hr_time(current_values.hrs + modifier);\n          },\n          min: function min() {\n            return minutes[direction];\n          },\n          mode: function mode() {\n            return current_values.mode === 'AM' ? 'PM' : 'AM';\n          }\n        };\n      }\n\n      this.set_segment(segment, time[segment]());\n    }\n  }, {\n    key: \"get_12hr_value\",\n    value: function get_12hr_value(timeObj) {\n      var time = timeObj || this.state.time;\n      return !time ? '' : [leading_zero(time.hrs), ':', leading_zero(time.min), ' ', time.mode].join('');\n    }\n  }, {\n    key: \"set_segment\",\n    value: function set_segment(segment, value) {\n      var time = _objectSpread({}, this.state.time, _defineProperty({}, segment, isNaN(value) ? value : parseInt(value)));\n\n      var value12hr = this.get_12hr_value(time);\n      var value24hr = this.polyfill.convert_to_24hr_time(value12hr);\n      this.setState({\n        time: time,\n        value24hr: value24hr\n      });\n    }\n  }, {\n    key: \"traverse_segments\",\n    value: function traverse_segments(direction) {\n      var _this3 = this;\n\n      var segments = this.polyfill.segments;\n      var modifier = direction == 'left' ? -1 : 1;\n      var newIndex = segments.indexOf(this.state.currentSegment) + modifier;\n      var finalIndex = newIndex <= 0 ? 0 : newIndex >= 2 ? 2 : newIndex;\n      var currentSegment = segments[finalIndex];\n      this.clear_entry_log();\n      this.setState({\n        currentSegment: currentSegment\n      });\n      setTimeout(function () {\n        _this3.update_a11y(['select']);\n      }, 0);\n    }\n  }, {\n    key: \"clear_entry_log\",\n    value: function clear_entry_log() {\n      var currentSegment = this.state.currentSegment;\n\n      if (currentSegment !== 'mode') {\n        this.manual_entry_log[currentSegment].clear();\n      }\n    }\n  }, {\n    key: \"next_segment\",\n    value: function next_segment() {\n      this.traverse_segments('right');\n    }\n  }, {\n    key: \"prev_segment\",\n    value: function prev_segment() {\n      this.traverse_segments('left');\n    }\n  }, {\n    key: \"clear_current_segment\",\n    value: function clear_current_segment() {\n      this.set_segment(this.state.currentSegment, '--');\n    }\n  }, {\n    key: \"onTimeChange\",\n    value: function onTimeChange() {\n      var _this4 = this;\n\n      if (this.props.onChange) {\n        this.props.onChange({\n          value: this.state.value24hr,\n          element: this.$input.current\n        });\n      }\n\n      setTimeout(function () {\n        _this4.update_a11y(['update']);\n      }, 0);\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      if (this.state.usePolyfill) return null;\n      this.setState({\n        value24hr: e.target.value\n      });\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(e) {\n      this.props.onMouseDown && this.props.onMouseDown(e);\n      this.focused_via_click = true;\n\n      if (this.$input.current.matches(':focus')) {\n        this.update_a11y(['select']);\n      }\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(e) {\n      this.props.onClick && this.props.onClick(e);\n      if (!this.state.usePolyfill) return null;\n      this.polyfill.select_cursor_segment(this.$input.current);\n      this.setState({\n        currentSegment: this.polyfill.get_current_segment(this.$input.current)\n      });\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus(e) {\n      this.props.onFocus && this.props.onFocus(e);\n      if (!this.state.usePolyfill) return null;\n      var segment = shiftKey ? 'mode' : 'hrs';\n\n      if (!this.focused_via_click) {\n        this.setState({\n          currentSegment: segment\n        });\n      }\n\n      this.update_a11y(['initial', 'select']);\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur(e) {\n      this.props.onBlur && this.props.onBlur(e);\n      this.focused_via_click = false;\n      this.setState({\n        currentSegment: null\n      });\n    }\n  }, {\n    key: \"handleTab\",\n    value: function handleTab(e) {\n      if (e.shiftKey && this.state.currentSegment !== 'hrs') {\n        e.preventDefault();\n        this.prev_segment();\n      } else if (!e.shiftKey && this.state.currentSegment !== 'mode') {\n        e.preventDefault();\n        this.next_segment();\n      }\n    }\n  }, {\n    key: \"handleKeyDown\",\n    value: function handleKeyDown(e) {\n      var _this5 = this;\n\n      if (!this.state.usePolyfill) return null;\n      var key = e.key;\n      var actions = {\n        ArrowRight: function ArrowRight() {\n          return _this5.next_segment();\n        },\n        ArrowLeft: function ArrowLeft() {\n          return _this5.prev_segment();\n        },\n        ArrowUp: function ArrowUp() {\n          return _this5.nudge_current_segment('up');\n        },\n        ArrowDown: function ArrowDown() {\n          return _this5.nudge_current_segment('down');\n        },\n        Delete: function Delete() {\n          return _this5.clear_current_segment();\n        },\n        Backspace: function Backspace() {\n          return _this5.clear_current_segment();\n        },\n        numberKey: function numberKey() {\n          return _this5.enter_number(e.key);\n        },\n        A_or_P: function A_or_P() {\n          return _this5.enter_A_or_P(e.key);\n        }\n      };\n      var isNumberKey = /\\d/.test(e.key);\n      var is_A_or_P = /[ap]/i.test(e.key);\n\n      if (key === 'Tab') {\n        this.handleTab(e);\n      } else if (actions[key]) {\n        e.preventDefault();\n        actions[key]();\n      } else if (isNumberKey) {\n        actions.numberKey();\n      } else if (is_A_or_P) {\n        actions.A_or_P();\n      } else if (key !== 'Escape') {\n        e.preventDefault();\n      }\n    }\n  }, {\n    key: \"enter_A_or_P\",\n    value: function enter_A_or_P(key) {\n      var isA = /a/i.test(key);\n      this.set_segment('mode', isA ? 'AM' : 'PM');\n    }\n  }, {\n    key: \"enter_number\",\n    value: function enter_number(key) {\n      var segment = this.state.currentSegment;\n      var number = parseInt(key);\n      var entry_log = this.manual_entry_log[segment];\n      var entry_count = entry_log.items.length;\n      var upper_limits = {\n        hrs: [1, 2],\n        min: [5, 9]\n      };\n      var limit = upper_limits[segment][entry_count];\n\n      if (entry_count < 2) {\n        entry_log.add(number);\n      }\n\n      var full_limit = parseInt(upper_limits[segment].join(''));\n      var full_entry = parseInt(entry_log.items.join(''));\n\n      if (full_limit >= full_entry) {\n        this.set_segment(segment, full_entry);\n      }\n\n      var at_limit = number > limit || entry_log.items.length === 2;\n\n      if (at_limit) {\n        this.next_segment();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      var _this$props = this.props,\n          value = _this$props.value,\n          forcePolyfill = _this$props.forcePolyfill,\n          className = _this$props.className,\n          props = _objectWithoutProperties(_this$props, [\"value\", \"forcePolyfill\", \"className\"]);\n\n      var _this$state = this.state,\n          usePolyfill = _this$state.usePolyfill,\n          value24hr = _this$state.value24hr,\n          currentSegment = _this$state.currentSegment;\n      var value12hr = usePolyfill ? this.get_12hr_value() : null;\n\n      if (usePolyfill && currentSegment !== null) {\n        var highlightSegment = function highlightSegment() {\n          return _this6.polyfill.select_segment(_this6.$input.current, currentSegment);\n        };\n\n        setTimeout(highlightSegment, 0);\n      }\n\n      var polyfillClass = this.state.usePolyfill ? polyfillClassName : '';\n      return React.createElement('input', _objectSpread({}, props, {\n        onChange: function onChange(e) {\n          return _this6.handleChange(e);\n        },\n        onFocus: function onFocus(e) {\n          return _this6.handleFocus(e);\n        },\n        onBlur: function onBlur(e) {\n          return _this6.handleBlur(e);\n        },\n        onMouseDown: function onMouseDown(e) {\n          return _this6.handleMouseDown(e);\n        },\n        onClick: function onClick(e) {\n          return _this6.handleClick(e);\n        },\n        onKeyDown: function onKeyDown(e) {\n          return _this6.handleKeyDown(e);\n        },\n        ref: this.$input,\n        type: usePolyfill ? 'text' : 'time',\n        value: usePolyfill ? value12hr : value24hr,\n        className: [className || '', polyfillClass].join(' ').trim() || undefined\n      }), null);\n    }\n  }]);\n\n  return TimeInput;\n}(React.Component);\n\nexport { TimeInput as default };","import React, { useState } from 'react'\r\nimport './App.css'\r\nimport TimeInput from '../../index'\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\r\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/prism'\r\n\r\nconst ExampleBlock = ({ label, Input, codeString }) => {\r\n\tconst [value, setValue] = useState('20:30')\r\n\r\n\treturn (\r\n\t\t<div style={{ marginBottom: '2em' }}>\r\n\t\t\t<h2>{label} time input</h2>\r\n\r\n\t\t\t<label style={{ display: 'inline-block' }}>\r\n\t\t\t\t<span style={{ marginRight: '0.5em' }}>{label} time input</span>\r\n\t\t\t\t<Input\r\n\t\t\t\t\tcurrentValue={value}\r\n\t\t\t\t\tsetValue={setValue}\r\n\t\t\t\t\tclassName=\"exampleClass\"\r\n\t\t\t\t/>\r\n\t\t\t</label>\r\n\r\n\t\t\t<p>\r\n\t\t\t\t<button onClick={() => setValue('07:15')}>\r\n\t\t\t\t\tSet {label} time to 7:15 AM\r\n\t\t\t\t</button>\r\n\t\t\t\t<button onClick={() => setValue('15:45')}>\r\n\t\t\t\t\tSet {label} time to 3:45 PM\r\n\t\t\t\t</button>\r\n\t\t\t</p>\r\n\r\n\t\t\t<p>\r\n\t\t\t\t{label} returned value: \"{value}\"\r\n\t\t\t</p>\r\n\r\n\t\t\t{!!codeString && (\r\n\t\t\t\t<SyntaxHighlighter\r\n\t\t\t\t\tstyle={dark}\r\n\t\t\t\t\tclassName=\"code\"\r\n\t\t\t\t\tlanguage=\"javascript\"\r\n\t\t\t\t\tshowLineNumbers={true}\r\n\t\t\t\t>\r\n\t\t\t\t\t{codeString.replace(/^\\n/, '')}\r\n\t\t\t\t</SyntaxHighlighter>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nfunction App() {\r\n\t// let [addedLater, setAddedLater] = useState(false)\r\n\t// setTimeout(() => setAddedLater(true), 2000)\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<h1>React Time Input Polyfill</h1>\r\n\r\n\t\t\t<p>\r\n\t\t\t\tCode examples are simplified guides,{' '}\r\n\t\t\t\t<strong>not exact code replicas</strong>.\r\n\t\t\t</p>\r\n\r\n\t\t\t<ExampleBlock\r\n\t\t\t\tlabel=\"Non-forced polyfill\"\r\n\t\t\t\tInput={({ currentValue, setValue, className }) => (\r\n\t\t\t\t\t<TimeInput\r\n\t\t\t\t\t\tvalue={currentValue}\r\n\t\t\t\t\t\tonChange={({ value }) => setValue(value)}\r\n\t\t\t\t\t\tclassName={className}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t\tcodeString={`\r\nimport React, { useState } from 'react'\r\nimport TimeInputPolyfill from 'react-time-input-polyfill'\r\n\r\nconst TimeInput = ({ label, currentValue, onInputChange }) => {\r\n\treturn (\r\n\t\t<label>\r\n\t\t\t<span>{label}</span>\r\n\t\t\t<TimeInputPolyfill\r\n\r\n\t\t\t\t// set the value through props\r\n\t\t\t\tvalue={currentValue}\r\n\r\n\t\t\t\t// onChange will run every time the value is updated\r\n\t\t\t\tonChange={({ value, element }) => {\r\n\t\t\t\t\tconsole.log({\r\n\r\n\t\t\t\t\t\t// The current value in 24 hour time format\r\n\t\t\t\t\t\tvalue,\r\n\r\n\t\t\t\t\t\t// The <input> HTML element\r\n\t\t\t\t\t\telement,\r\n\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\t// Export the new value to the parent component\r\n\t\t\t\t\tonInputChange(value)\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</label>\r\n\t)\r\n}\r\n\r\n//////////////////////////////////////\r\n\r\nconst ExampleForm = ()=> {\r\n\r\n\t// Use state to keep track of the value\r\n\tconst [inputValue, setInputValue] = useState('20:30') // default to 8:30 PM\r\n\r\n\treturn (\r\n\t\t<form>\r\n\t\t\t<TimeInput\r\n\t\t\t\tlabel=\"Label text\"\r\n\r\n\t\t\t\t// Use the state value to set the time\r\n\t\t\t\tcurrentValue={inputValue}\r\n\r\n\t\t\t\t// Use the set state function to update the time when it changes\r\n\t\t\t\tonInputChange={ newValue => setInputValue(newValue) }\r\n\t\t\t/>\r\n\t\t\t<button type=\"submit\">Submit</button>\r\n\t\t</form>\r\n\t)\r\n}\r\n`}\r\n\t\t\t/>\r\n\r\n\t\t\t<ExampleBlock\r\n\t\t\t\tlabel=\"Forced polyfill\"\r\n\t\t\t\tInput={({ currentValue, setValue, className }) => (\r\n\t\t\t\t\t<TimeInput\r\n\t\t\t\t\t\tvalue={currentValue}\r\n\t\t\t\t\t\tonChange={({ value }) => setValue(value)}\r\n\t\t\t\t\t\tforcePolyfill={true}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t\tcodeString={`\r\nimport React from 'react'\r\nimport TimeInputPolyfill from 'react-time-input-polyfill'\r\n\r\nconst TimeInput = ({ label, currentValue, onInputChange }) => {\r\n\treturn (\r\n\t\t<label>\r\n\t\t\t<span>{label}</span>\r\n\t\t\t<TimeInputPolyfill\r\n\t\t\t\tvalue={currentValue}\r\n\r\n\t\t\t\t/*  Force browsers that support input[type=time]\r\n\t\t\t\t\tto use the polyfill.\r\n\t\t\t\t\t(useful for testing and debugging)\r\n\t\t\t\t*/  forcePolyfill={true}\r\n\r\n\t\t\t\tonChange={({ value, element }) => {\r\n\t\t\t\t\tonInputChange(value)\r\n\t\t\t\t}\r\n\t\t\t/>\r\n\t\t</label>\r\n\t)\r\n}`}\r\n\t\t\t/>\r\n\r\n\t\t\t<ExampleBlock\r\n\t\t\t\tlabel=\"Non-polyfill\"\r\n\t\t\t\tInput={({ currentValue, setValue, className }) => (\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"time\"\r\n\t\t\t\t\t\tvalue={currentValue}\r\n\t\t\t\t\t\tonChange={e => setValue(e.target.value)}\r\n\t\t\t\t\t\tclassName={className}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t\tcodeString={`\r\n// View this example in Internet Explorer\r\n// This is a normal time input with no polyfill applied\r\n\r\nimport React from 'react'\r\n\r\nexport const TimeInput = ({ label, currentValue, onInputChange }) => {\r\n\treturn (\r\n\t\t<label>\r\n\t\t\t<span>{label}</span>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"time\"\r\n\t\t\t\tvalue={currentValue}\r\n\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\tconsole.log(e) // the default browser event\r\n\t\t\t\t\tonInputChange(e.target.value)\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</label>\r\n\t)\r\n}`}\r\n\t\t\t/>\r\n\r\n\t\t\t{/* {addedLater && (\r\n\t\t\t\t<ExampleBlock\r\n\t\t\t\t\tlabel=\"Delayed forced polyfill\"\r\n\t\t\t\t\tInput={({ currentValue, setValue, className }) => (\r\n\t\t\t\t\t\t<TimeInput\r\n\t\t\t\t\t\t\tvalue={currentValue}\r\n\t\t\t\t\t\t\tonChange={({ value }) => setValue(value)}\r\n\t\t\t\t\t\t\tforcePolyfill={true}\r\n\t\t\t\t\t\t\tclassName={className}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t/>\r\n\t\t\t)} */}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}