(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

module.exports = function create_accessibility_block () {
	var $block = document.createElement('div');
	$block.setAttribute('aria-live', 'assertive');
	$block.setAttribute('style', 'position: absolute; opacity: 0; height: 0; width: 0; overflow: hidden; pointer-events: none;');
	$block.classList.add('time-input-polyfill-accessibility-block');
	document.querySelector('body').appendChild($block);
	return $block;
}

},{}],2:[function(require,module,exports){

var get_current_segment = require('../getters/get_current_segment');
var get_values = require('../getters/get_values');

module.exports = function update_a11y ($input, announcementArray) {
	// Timeout helps ensure that the input has stabilized
	setTimeout(function(){
		var current_segment = get_current_segment($input);
		var values = get_values($input);
		var value = values[current_segment];
		var finalValue = value == '--' ? 'blank' : value;

		var segmentName = {
			hrs: 'Hours',
			min: 'Minutes',
			mode: 'AM/PM'
		}[current_segment];

		var announcements = {
			initial: '$label grouping $fullValue.',
			select: '$segmentName spin button $segmentValue.',
			update: '$segmentValue.',
		}

		var textArray = announcementArray.map(function(providedString){
			if (announcements[providedString]) {
				return announcements[providedString];
			}
			return providedString;
		});

		var fullValue = $input.value.replace(/--/g,'blank');

		var html = '<p>' + textArray.join('</p><p>') + '</p>';
		html = html.replace(/\$label/g, $input.polyfill.label);
		html = html.replace(/\$segmentName/g, segmentName);
		html = html.replace(/\$segmentValue/g, finalValue);
		html = html.replace(/\$fullValue/g, fullValue);

		$input.polyfill.$a11y.innerHTML = html;
	}, 1);
}

},{"../getters/get_current_segment":9,"../getters/get_values":12}],3:[function(require,module,exports){

module.exports = function convert_hours_to_12hr_time (hours) {
	return hours <= 12 ? hours === 0 ? 12 : hours : hours - 12;
}

},{}],4:[function(require,module,exports){

module.exports = function convert_number (number) {
	return isNaN(number) ? number : parseInt(number);
}

},{}],5:[function(require,module,exports){

var convert_number = require('./convert_number');
var convert_hours_to_12hr_time = require('./convert_hours_to_12hr_time');
var leading_zero = require('./leading_zero');

module.exports = function convert_to_12hr_time (timeString_24hr) {
	if (timeString_24hr === '') return '--:-- --';
	var twentyFour_regex = /([0-9]{2})\:([0-9]{2})/;
	var result = twentyFour_regex.exec(timeString_24hr);
	var hrs_24 = convert_number(result[1]);
	var min = result[2];
	var hrs_12 = convert_hours_to_12hr_time(hrs_24);
	var isPM = hrs_24 > 12;
	var mode = isPM ? 'PM' : 'AM';
	return [leading_zero(hrs_12), ':', min, ' ', mode].join('');
}

},{"./convert_hours_to_12hr_time":3,"./convert_number":4,"./leading_zero":7}],6:[function(require,module,exports){

var leading_zero = require('./leading_zero');

module.exports = function convert_to_24hr_time (timeString_12hr) {
	if (/-/.test(timeString_12hr)) return '';
	var isPM = timeString_12hr.indexOf('PM') > -1;
	var timeResult = /^([0-9]{2})/.exec(timeString_12hr);
	var hrs = timeResult ? parseInt(timeResult[1]) : '';
	var newHrs;
	if (hrs === 12) {
		newHrs = isPM ? 12 : 0;
	} else {
		newHrs = isPM ? hrs + 12 : hrs;
	}
	var finalHrs = newHrs === 24 ? 0 : newHrs;
	var timeRegEx = /^[0-9]{2}:([0-9]{2}) (AM|PM)/;
	return timeString_12hr.replace(timeRegEx, leading_zero(finalHrs)+':$1');
}

},{"./leading_zero":7}],7:[function(require,module,exports){

module.exports = function leading_zero (number) {
	if (isNaN(number)) return number;
	var purified = parseInt(number);
	return purified < 10 ? '0' + purified : number;
}

},{}],8:[function(require,module,exports){
// selector is optional, it allows for an early exit
module.exports = function ($input, selectorString) {
	var $elem = $input;

	// https://stackoverflow.com/a/8729274/1611058
	var ancestors = [];
	while ($elem) {
		ancestors.push($elem);
		var matchesSelector = $elem.msMatchesSelector ?
			$elem.msMatchesSelector(selectorString) :
			$elem.matches(selectorString);
		if (matchesSelector) {
			return ancestors;
		}
		$elem = $elem.parentElement;
	}

	return ancestors;
}

},{}],9:[function(require,module,exports){

var ranges = require('../static-values/ranges');
var get_selected_range = require('./get_selected_range');

module.exports = function get_current_segment ($input) {
	var selection = get_selected_range($input);
	for (var segment in ranges) {
		var range = ranges[segment];
		var aboveMin = range.start <= selection.start;
		var belowMax = range.end >= selection.end;
		if (aboveMin && belowMax) {
			return segment;
		}
	}
	return 'hrs';
}

},{"../static-values/ranges":19,"./get_selected_range":11}],10:[function(require,module,exports){

var get_ancestors = require('./get_ancestors');

module.exports = function get_label ($input) {

	var labelText =
		aria_labelledby($input) ||
		aria_label($input) ||
		for_attribute($input) ||
		label_wrapper_element($input) ||
		title_attribute($input);

	if (labelText) return labelText;

	console.error('Label text for input not found.', $input);
	throw new Error('Cannot polyfill time input due to a missing label.');
}

function aria_labelledby($input){
	var ariaLabelByID = $input.getAttribute('aria-labelledby');
	if (ariaLabelByID) {
		var $ariaLabelBy = document.getElementById(ariaLabelByID);
		if ($ariaLabelBy) return $ariaLabelBy.textContent;
	}
	return false;
}

function aria_label($input){
	var ariaLabel = $input.getAttribute('aria-label');
	if (ariaLabel) return ariaLabel;
	return false;
}

function for_attribute($input){
	if ($input.id) {
		var $forLabel = document.querySelector('label[for="'+$input.id+'"]');
		if ($forLabel) return $forLabel.textContent;
	}
	return false;
}

function label_wrapper_element($input){
	var ancestors = get_ancestors($input, 'label');
	var $parentLabel = ancestors[ancestors.length - 1];
	if ($parentLabel.nodeName == 'LABEL') return $parentLabel.textContent;
	return false
}

function title_attribute($input){
	var titleLabel = $input.getAttribute('title');
	if (titleLabel) return titleLabel;
	return false
}

},{"./get_ancestors":8}],11:[function(require,module,exports){

module.exports = function get_selected_range ($input) {
	return { start: $input.selectionStart, end: $input.selectionEnd };
}

},{}],12:[function(require,module,exports){

var convert_number = require('../converters/convert_number');

module.exports = function get_values ($input, timeString) {
	var value = timeString ? timeString : $input.value;
	var regEx = /([0-9-]{1,2})\:([0-9-]{1,2})\s?(AM|PM|\-\-)?/;
	var result = regEx.exec(value);

	return {
		hrs: convert_number(result[1]),
		min: convert_number(result[2]),
		mode: result[3],
	}
}

},{"../converters/convert_number":4}],13:[function(require,module,exports){

var manual_entry_log = [];

function clear () {
	manual_entry_log = [];
}

function add (entry) {
	manual_entry_log.push(entry);
}

function items(){
	return manual_entry_log;
}

module.exports = {
	items: items,
	clear: clear,
	add: add,
}

},{}],14:[function(require,module,exports){

var traverse = require('./traverse');

module.exports = function next_segment ($input) {
	traverse($input, 'next');
}

},{"./traverse":18}],15:[function(require,module,exports){

var traverse = require('./traverse');

module.exports = function prev_segment ($input) {
	traverse($input, 'prev');
}

},{"./traverse":18}],16:[function(require,module,exports){

var get_current_segment = require('../getters/get_current_segment');
var select_segment = require('./select_segment');

module.exports = function select_cursor_segment ($input) {
	var current_segment = get_current_segment($input);
	select_segment($input, current_segment);
}

},{"../getters/get_current_segment":9,"./select_segment":17}],17:[function(require,module,exports){

module.exports = function select_segment ($input, segment) {

	set_input_type();

	var actions = {
		hrs:  select(0, 2),
		min:  select(3, 5),
		mode: select(6, 8),
	};

	actions[segment]($input);

	function set_input_type() {
		var type = segment === 'mode' ? 'text' : 'tel';
		$input.setAttribute('type', type);
	}

	function select (start, end) {
		return function () {
			$input.setSelectionRange(start, end);
		}
	}
}

},{}],18:[function(require,module,exports){

var get_current_segment = require('../getters/get_current_segment');
var select_segment = require('../selectors/select_segment');

var manual_entry_log = require('../helpers/manual_entry_log');
var segments = require('../static-values/segments');

var update_a11y = require('../accessibility/update_a11y');

module.exports = function traverse ($input, direction) {
	var segment = get_current_segment($input);

	var modifier = direction === 'next' ? 1 : -1;
	var next_segment_index = segments.indexOf(segment) + modifier;

	var next_segment = {
		next: segments[next_segment_index] || 'mode',
		prev: next_segment_index < 0 ? 'hrs' : segments[next_segment_index],
	}[direction];

	select_segment($input, next_segment);
	manual_entry_log.clear();
	update_a11y($input, ['select'])
}

},{"../accessibility/update_a11y":2,"../getters/get_current_segment":9,"../helpers/manual_entry_log":13,"../selectors/select_segment":17,"../static-values/segments":20}],19:[function(require,module,exports){

var ranges = {
	hrs : { start: 0, end: 2 },
	min : { start: 3, end: 5 },
	mode : { start: 6, end: 8 },
}

module.exports = ranges;

},{}],20:[function(require,module,exports){

var ranges = require('./ranges');

var segments = Object.keys(ranges);

module.exports = segments;

},{"./ranges":19}],21:[function(require,module,exports){
//static-values
var segments = require('time-input-polyfill/core/static-values/segments'); // converters


var convert_to_12hr_time = require('time-input-polyfill/core/converters/convert_to_12hr_time');

var convert_to_24hr_time = require('time-input-polyfill/core/converters/convert_to_24hr_time');

var convert_hours_to_12hr_time = require('time-input-polyfill/core/converters/convert_hours_to_12hr_time'); //selectors


var select_cursor_segment = require('time-input-polyfill/core/selectors/select_cursor_segment');

var select_segment = require('time-input-polyfill/core/selectors/select_segment');

var next_segment = require('time-input-polyfill/core/selectors/next_segment');

var prev_segment = require('time-input-polyfill/core/selectors/prev_segment'); // getters


var get_label = require('time-input-polyfill/core/getters/get_label');

var get_current_segment = require('time-input-polyfill/core/getters/get_current_segment');

var get_values = require('time-input-polyfill/core/getters/get_values');

var get_values_from_24hr = function get_values_from_24hr(value24hr) {
  var value12hr = convert_to_12hr_time(value24hr);
  return get_values(null, value12hr);
}; // a11y


var create_a11y_block = require('time-input-polyfill/core/accessibility/create_a11y_block');

window.timePolyfillHelpers = {
  segments: segments,
  convert_to_12hr_time: convert_to_12hr_time,
  convert_to_24hr_time: convert_to_24hr_time,
  convert_hours_to_12hr_time: convert_hours_to_12hr_time,
  select_cursor_segment: select_cursor_segment,
  select_segment: select_segment,
  next_segment: next_segment,
  prev_segment: prev_segment,
  get_label: get_label,
  get_current_segment: get_current_segment,
  get_values: get_values,
  get_values_from_24hr: get_values_from_24hr,
  create_a11y_block: create_a11y_block
};

},{"time-input-polyfill/core/accessibility/create_a11y_block":1,"time-input-polyfill/core/converters/convert_hours_to_12hr_time":3,"time-input-polyfill/core/converters/convert_to_12hr_time":5,"time-input-polyfill/core/converters/convert_to_24hr_time":6,"time-input-polyfill/core/getters/get_current_segment":9,"time-input-polyfill/core/getters/get_label":10,"time-input-polyfill/core/getters/get_values":12,"time-input-polyfill/core/selectors/next_segment":14,"time-input-polyfill/core/selectors/prev_segment":15,"time-input-polyfill/core/selectors/select_cursor_segment":16,"time-input-polyfill/core/selectors/select_segment":17,"time-input-polyfill/core/static-values/segments":20}]},{},[21])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
